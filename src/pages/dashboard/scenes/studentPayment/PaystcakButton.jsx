import React, { useState } from 'react';
import { Box, CircularProgress, TextField } from '@mui/material';
import { endpoints } from '../../../../utils/constants';
import Modal from '../../components/modal'; 
import { useSelector, useDispatch } from 'react-redux';
import useApi from '../../../../hooks/useApi';
import { setUser} from '../../../../reduxStore/slices/usersSlice';
import ActionButton from '../../components/actionButton';
import PaymentIcon from '@mui/icons-material/Payment';


const PaystackButton = ({ onSuccess = () => {} }) => {  // Default to an empty function
  const [loading, setLoading] = useState(false);
  const [modalOpen, setModalOpen] = useState(false);  // State to control modal visibility
  const [paymentAmount, setPaymentAmount] = useState('');  // State to store the entered amount
  const {userId, studentId} = useSelector(state => state.users.user);  // Assuming your userId is stored under `state.users.user.userId`
  const dispatch = useDispatch(); // Initialize dispatch
  const { data, callApi } = useApi();

  const handleOpenModal = () => {
    setModalOpen(true);
  };

  const handleCloseModal = () => {
    setModalOpen(false);
  };

  const handleConfirmPayment = () => {
    // Proceed with Paystack payment after confirming the amount
    handlePaystackPayment();
    handleCloseModal();
  };

  const handlePaystackPayment = async () => {
    setLoading(true);

    try {
      // Request to your backend to initialize payment
      const response = await fetch(endpoints.PAYSTACK_INIT, { 
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,  // Pass userId here
          paymentAmount: parseFloat(paymentAmount)  // Ensure this amount is in Naira, backend will handle conversion
        }),
      });

      const data = await response.json();
      const publicKey = import.meta.env.VITE_PAYSTACK_PUBLIC_KEY;  // Ensure this is correctly configured

      if (data && data.payment_url && data.reference) {
        const paystack = window.PaystackPop.setup({
          key: publicKey, // Public key from environment
          email: data.email,
          currency: 'NGN',
          amount: data.amount * 100,  // Convert to kobo if amount is in Naira
          reference: data.reference, // The reference generated by backend
          metadata: {
            userId: data.userId, // Pass the userId as metadata
          },
          onClose: function () {
            // Verify transaction even when user closes the modal
            verifyTransaction(data.reference);
          },
          callback: function (response) {
            const reference = response.reference;
            // Verify transaction after successful payment
            verifyTransaction(reference);
          },
        });

        // Open the Paystack payment dialog
        paystack.openIframe();
      }
    } catch (error) {
      console.error("Error initializing payment:", error);
    } finally {
      setLoading(false);
    }
  };

  // Function to verify the transaction on the backend
  const verifyTransaction = async (reference) => {
    try {
      const response = await fetch(`${endpoints.PAYSTACK_PAYMENT}/${reference}`, { 
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      });
      
      const result = await response.json();
      if (result.status === 'success') {
        setPaymentAmount('');
        onSuccess();  // Call onSuccess if the payment was successful
        
        // Fetch user data after payment success
        const refreshUserData = await callApi(`${endpoints.USER}/${userId}`, 'GET');
        
        if (refreshUserData && refreshUserData.student) {
          dispatch(setUser(refreshUserData.student)); // Use the correct user data from refreshUserData
          console.log(refreshUserData.student);
        }
      } else {
        console.error("Verification failed:", result);
        console.log('Payment failed');
      }
    } catch (error) {
      console.error("Error verifying transaction:", error);
    }
  };
  

  return (
    <Box>
      <ActionButton
      icon={<PaymentIcon />}
        disabled={loading}
        onClick={handleOpenModal}  // Open modal on button click
        content= {loading ? <CircularProgress size={24} /> : 'Pay Now'}

      />

      {/* Modal for inputting payment amount */}
      <Modal
        open={modalOpen}
        onClose={handleCloseModal}
        title="Enter Payment Amount"
        onConfirm={handleConfirmPayment}
        confirmMessage="Proceed with Payment"
      >
        <TextField
          label="Amount (Naira)"
          type="number"
          value={paymentAmount}
          onChange={(e) => setPaymentAmount(e.target.value)}  // Update payment amount
          fullWidth
        />
      </Modal>
    </Box>
  );
};

export default PaystackButton;
