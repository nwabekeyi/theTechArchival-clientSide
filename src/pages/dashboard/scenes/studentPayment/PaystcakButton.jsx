import React, { useState } from 'react';
import { Box, Button, CircularProgress } from '@mui/material';
import { useSelector } from 'react-redux';  // Import useSelector to get userId from Redux
import { endpoints } from '../../../../utils/constants';

const PaystackButton = () => {
  const [loading, setLoading] = useState(false);
  const userId = useSelector(state => state.users.user.userId);  // Assuming your userId is stored under `state.users.user.userId`

  const handlePaystackPayment = async () => {
    setLoading(true);

    try {
      // Request to your backend to initialize payment
      const response = await fetch(endpoints.PAYSTACK_INIT, { 
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          userId,  // Pass userId here
          paymentAmount: 5000
        }),
      });

      const data = await response.json();
      const publicKey = import.meta.env.VITE_PAYSTACK_PUBLIC_KEY;

      if (data && data.payment_url && data.reference) {
        const paystack = window.PaystackPop.setup({
          key: publicKey, // Public key
          email: data.email,
          currency: 'NGN',
          amount: data.amount * 100, // Convert to kobo (100 kobo = 1 Naira)
          reference: data.reference, // The reference generated by backend
          metadata: {
            userId: data.userId, // Pass the userId as metadata
          },
          onClose: function () {
            // Verify transaction even when user closes the modal
            verifyTransaction(data.reference);
          },
          callback: function (response) {
            const reference = response.reference;
            // Verify transaction after successful payment
            verifyTransaction(reference);
          },
        });

        paystack.openIframe();
      }
    } catch (error) {
      console.error("Error initializing payment:", error);
    } finally {
      setLoading(false);
    }
  };

  // Function to verify the transaction on the backend
  const verifyTransaction = (reference) => {
    fetch(`${endpoints.PAYSTACK_PAYMENT}/${reference}`, {  // Call the correct endpoint to verify the payment
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
    })
    .then((response) => response.json())
    .then((result) => {
      // Redirect to confirmation or handle based on result
      if (result.status === 'success') {
        console.log('payment successful')
        // window.location.href = '/confirmation';
      } else {
        console.error("Verification failed:", result);
        // window.location.href = '/payment-failure';
        console.log('payment failed')
      }
    })
    .catch((error) => {
      console.error("Error verifying transaction:", error);
      // window.location.href = '/payment-failure';
    });
  };

  return (
    <Box>
      <Button
        disabled={loading}
        onClick={handlePaystackPayment}
        variant="contained"
        color="primary"
      >
        {loading ? <CircularProgress size={24} /> : 'Pay Now'}
      </Button>
    </Box>
  );
};

export default PaystackButton;
